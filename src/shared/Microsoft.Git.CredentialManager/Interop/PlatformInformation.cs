// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
using System.Diagnostics;
using System.Linq;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Runtime.Versioning;
using System.Text.RegularExpressions;

namespace Microsoft.Git.CredentialManager.Interop
{
    public abstract class PlatformInformation : IPlatformInformation
    {
        protected PlatformInformation()
        {
            ApplicationVersion = GetAppVersion();
            ApplicationCommit = GetGitCommitId() ?? "Unknown";

#if NETFRAMEWORK
            RuntimeName = ".NET Framework";
            RuntimeVersion = System.Environment.Version.ToString();
            CpuArchitecture = System.Environment.Is64BitOperatingSystem ? "x86-64" : "x86";
#elif NETSTANDARD
            GetTargetFrameworkInfo(out string name, out string version);
            RuntimeVersion = version;
            RuntimeName = name;
            CpuArchitecture = GetCpuArchitecture();
#endif
        }

        private static string GetAppVersion()
        {
            return FileVersionInfo.GetVersionInfo(Assembly.GetExecutingAssembly().Location).ProductVersion;
        }

        private static string GetGitCommitId()
        {
            // Each assembly has a type "ThisAssembly" with version information as constant fields
            // generated by Nerdbank.GitVersioning
            var assembly = Assembly.GetEntryAssembly();
            var type = assembly?.GetType("ThisAssembly");
            if (type is null)
            {
                return null;
            }

            var constants = type.GetFields(BindingFlags.NonPublic | BindingFlags.Static | BindingFlags.FlattenHierarchy)
                             .Where(f => f.IsLiteral && !f.IsInitOnly && f.FieldType == typeof(string));

            var commitConst = constants.FirstOrDefault(f => string.Equals(f.Name, "GitCommitId"));

            return commitConst?.GetRawConstantValue().ToString();
        }

#if  NETSTANDARD
        private static string GetCpuArchitecture()
        {
            switch (RuntimeInformation.OSArchitecture)
            {
                case Architecture.Arm:
                    return "ARM32";
                case Architecture.Arm64:
                    return "ARM64";
                case Architecture.X64:
                    return "x86-64";
                case Architecture.X86:
                    return "x86";
                default:
                    return RuntimeInformation.OSArchitecture.ToString();
            }
        }
#endif

        private static void GetTargetFrameworkInfo(out string frameworkName, out string frameworkVersion)
        {
            var assembly = Assembly.GetEntryAssembly();
            var attr = assembly?.GetCustomAttribute<TargetFrameworkAttribute>();
            var attrValue = attr?.FrameworkName;

            if (!(attrValue is null))
            {
                // Example values:
                //
                // .NETCoreApp,Version=2.1
                // .NETFramework,Version=4.6.1
                //
                var match = Regex.Match(
                    attrValue,
                    "(?'name'.+),\\s*Version=v(?'ver'.+)",
                    RegexOptions.Compiled | RegexOptions.IgnoreCase);

                if (match.Success)
                {
                    string name = match.Groups["name"].Value;
                    string version = match.Groups["ver"].Value;

                    switch (name.ToLowerInvariant())
                    {
                        case ".netcoreapp":
                            frameworkName = ".NET Core";
                            break;
                        case ".netframework":
                            frameworkName = ".NET Framework";
                            break;
                        default:
                            frameworkName = name;
                            break;
                    }

                    frameworkVersion = version;
                }
            }

            frameworkName = "Unknown";
            frameworkVersion = "?";
        }

        public string ApplicationVersion { get; }

        public string ApplicationCommit { get; }

        public abstract string OperatingSystemName { get; }

        public abstract string OperatingSystemVersion { get; }

        public string RuntimeName { get; }

        public string RuntimeVersion { get; }

        public string CpuArchitecture { get; }
    }
}
