<Project>
  <!-- Implicit SDK props import -->
  <Import Project="Sdk.props" Sdk="Microsoft.NET.Sdk" />

  <PropertyGroup>
    <TargetFramework>net472</TargetFramework>
    <GenerateAssemblyInfo>false</GenerateAssemblyInfo>
    <!-- MicroBuild hack: override OutDir to make all files we want to sign under it. -->
    <OutDir>$(RootDir)</OutDir>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="MicroBuild.Core" Version="0.2.0">
      <!-- Development dependency only -->
      <PrivateAssets>all</PrivateAssets>
    </PackageReference>
  </ItemGroup>

  <ItemGroup>
    <FilesToSign Include="
      $(OutDir)Atlassian.Bitbucket.dll;
      $(OutDir)Atlassian.Bitbucket.UI.exe;
      $(OutDir)git-credential-manager-core.exe;
      $(OutDir)GitHub.dll;
      $(OutDir)GitHub.UI.exe;
      $(OutDir)Microsoft.Authentication.dll;
      $(OutDir)Microsoft.AzureRepos.dll;
      $(OutDir)Microsoft.Git.CredentialManager.dll;
      $(OutDir)Microsoft.Git.CredentialManager.UI.dll;">
      <Authenticode>Microsoft400</Authenticode>
      <InProject>false</InProject>
    </FilesToSign>
  </ItemGroup>

  <!-- Implicit SDK targets import (so we can override the default targets below) -->
  <Import Project="Sdk.targets" Sdk="Microsoft.NET.Sdk" />

  <!-- Check all the files to sign exist -->
  <Target Name="ValidateSigningDependencies"
          AfterTargets="PrepareForRun"
          Inputs="@(FilesToSign)"
          Outputs="$(OutDir)validatesign.timestamp">
    <Error Text="File to sign not found: %(FilesToSign.Identity)"
           Condition="!Exists('%(FilesToSign.Identity)')" />
    <WriteLinesToFile File="$(OutDir)validatesign.timestamp"
                      Lines="@(FilesToSign)"
                      Overwrite="true" />
  </Target>

    <!-- Check the RootDir property has been set -->
  <Target Name="ValidateRootDirProperty"
          BeforeTargets="ValidateSigningDependencies">
    <Error Text="'RootDir' property must be set during build"
           Condition="'$(RootDir)'==''" />
  </Target>

  <!-- We don't want to produce a binary with this project -->
  <Target Name="CoreCompile" />
  <Target Name="PrepareForRun" />

  <Target Name="CoreClean">
    <RemoveDir Directories="$(ProjectOutPath)" />
  </Target>

</Project>
